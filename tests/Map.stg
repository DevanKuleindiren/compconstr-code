type Bool {} = False | True;
type Nat {} = Zero | Succ Nat;
type List {a} = Nil | Cons a (List a);

length = {} \n {xs} -> case xs {} of
    Nil {} -> 0#;
    Cons {y,ys} -> case length {ys} of  -- ret_Cons8
        k -> +# {1#, k};
    default -> 0#;

map = {} \n {f,xs} ->
        case xs {} of
            Nil {}      -> Nil {};
            Cons {y,ys} -> let fy = {f,y} \u {} -> f {y};
                               mfy = {f,ys} \u {} -> map {f,ys};
                           in Cons {fy,mfy}; -- ret_Cons2
            default     -> Nil {};

zero = {} \n {} -> Zero {};
succ = {} \n {n} -> Succ {n};

one  = {} \n {} -> succ {zero};
two  = {} \n {} -> succ {one};

empty = {} \n {} -> Nil {};
cons  = {} \n {x,xs} -> Cons {x,xs};

list1 = {} \n {} -> cons {one, empty};
list = {} \n {} -> cons {one, list1};

answer = {} \n {} -> 42#;

checkAnswer = {} \n {} -> case answer {} of
    42#     -> True {};
    default -> False {};





fib = {} \n {n} ->
        letrec applyFib = {m} \u {m} ->
            case m {} of
                0#      -> 0#;
                1#      -> 1#;
                default -> let m1   = {m}  \u {} -> -# {m,1#};
                               m2   = {m}  \u {} -> -# {m,2#};
                               fib1 = {m1} \u {} -> applyFib {m1};
                               fib2 = {m2} \u {} -> applyFib {m2};
                           in +# {fib1,fib2};
        in
            applyFib {n};

index = {} \n 6#;

checkFibAns = {} \n {ans} -> case ans {} of
    8#      -> True {};
    default -> False {};

main = {} \n {} let ans = {} \u {} -> fib {index}; in checkFibAns {ans};
